IF EXISTS (SELECT * FROM INFORMATION_SCHEMA.ROUTINES WHERE ROUTINE_TYPE LIKE 'PROCEDURE' AND ROUTINE_NAME LIKE 'int_GetDNNPulse')
BEGIN
    DROP PROCEDURE int_GetDNNPulse;
END
GO

CREATE PROCEDURE [dbo].[int_GetDNNPulse]
AS
BEGIN

    DECLARE @DNNVersion TABLE
    (
        DNNVersion VARCHAR(100)
    );

    DECLARE @PortalAliases TABLE
    (
        HTTPALIAS VARCHAR(100),
    [ORDER] int
    );
 
    DECLARE @ModulesVersions TABLE
    (
        ModuleName VARCHAR(100),
        ModuleVersion VARCHAR(100)
    );

  DECLARE @DatabaseSize TABLE
  (
    Size VARCHAR(100)
  );
 
  DECLARE @DatabaseTier TABLE
  (
    Tier VARCHAR(100)
  );
    INSERT INTO @DNNVersion (DNNVersion)
    SELECT TOP 1 CONCAT(major, '.' , minor, '.' ,build) 
    FROM Version
    ORDER BY VersionId DESC;

    INSERT INTO @PortalAliases (HTTPALIAS, [order])
    SELECT HTTPAlias, CASE WHEN 
            IsPrimary=1 and CultureCode IS NULL THEN 0 
            ELSE CASE WHEN IsPrimary=1 THEN 1 ELSE 2 END
            END
    FROM PortalAlias
    WHERE PortalId = (SELECT MIN(PortalId) FROM Portals);

    INSERT INTO @ModulesVersions (ModuleName, ModuleVersion)
    SELECT ModuleName, Version
    FROM DesktopModules
    ORDER BY ModuleName ASC, Version ASC;
 
  INSERT INTO @DatabaseSize (Size)
  SELECT SUM(size/128.0) AS DatabaseDataSpaceAllocatedInMB
  FROM sys.database_files
  GROUP BY type_desc
  HAVING type_desc = 'ROWS'

    BEGIN TRY
    INSERT INTO @DatabaseTier (Tier)
    EXEC ('SELECT service_objective FROM sys.database_service_objectives WHERE database_id = DB_ID();');
  END TRY
  BEGIN CATCH
    INSERT INTO @DatabaseTier (Tier) VALUES ('Not Available');
  END CATCH;

    SELECT *
    FROM (
        SELECT 'DNNVersion' AS TYPE, DNNVersion AS NAME, 3 as [ORDER]
        FROM @DNNVersion

        UNION ALL

        SELECT 'PortalAlias' AS TYPE, HTTPALIAS AS NAME, [ORDER]
        FROM @PortalAliases

        UNION ALL

        SELECT 'Modules' AS TYPE, CONCAT(ModuleName, ' - ', ModuleVersion) AS NAME, 4 as [ORDER]
        FROM @ModulesVersions

    UNION ALL

    SELECT 'DatabaseTier' AS TYPE, Tier AS NAME, 5 as [ORDER]
    FROM @DatabaseTier

    UNION ALL

    SELECT 'DatabaseSize' AS TYPE, Size AS NAME, 6 as [ORDER]
    FROM @DatabaseSize

    ) AS DNNPulse
  order by [ORDER]

END
GO
